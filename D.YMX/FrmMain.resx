<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing"">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAJSUlAEFBQQA/Pz8AQUFBAEFBQQBBQUEAQkJCAEFBQQBBQUEAQUFBAEFB
        QQBCQkIAQkJCAEFBQQBCQkIAQUFBAEFBQQBCQkIAQUFBAEFBQQBBQUEAPz8/AEFBQQAlJSUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCQkIAQEBAAERERABBQUEAQkJCAEFBQQBCQkIAQUFBAEFB
        QQBCQkIAQUFBAEJCQgBCQkIAQUFBAEJCQgBBQUEAQkJCAEJCQgBBQUEAQkJCAEFBQQBEREQAQEBAAEJC
        QgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCQkIAQkJCAEJCQgBCQkIAQkJCACgoKAA3NzcAQEBABkJC
        QjFBQUEpQUFBK0FBQT9BQUEfQkJCNkJCQjZBQUEhQkJCQEFBQShBQUEqQkJCL0BAQAU7OzsACgoKAEJC
        QgBCQkIAQkJCAEJCQgBCQkIAAAAAAAAAAAAAAAAAAAAAAEJCQgBCQkIAQkJCAEJCQgBBQUEDQkJCSUJC
        QmhBQUFmQkJCyUJCQslCQkLKQkJC3kJCQr5CQkLWQkJC1kJCQsFCQkLfQkJCx0JCQstCQkLGQUFBY0JC
        QmhCQkJKQkJCA0JCQgBCQkIAQkJCAEJCQgAAAAAAAAAAAAAAAABBQUEAQUFBAEJCQgBCQkIBQkJCOkJC
        QnVCQkLRQkJC80JCQu9CQkL/QkJC/0JCQv9CQkL/QkJC/0JCQv9CQkL/QkJC/0JCQv9CQkL/QkJC/0JC
        Qv9CQkLvQkJC80JCQtNCQkJ2QkJCOkJCQgFCQkIAQkJCAEJCQgAAAAAAAAAAAEFBQQBBQUEAQUFBAEVF
        RQFCQkKfQkJC/0JCQv9CQkL/QUFA/0FBP/9BQT//QUE//0FBQP9BQUH/QkJB/0JCQf9BQUH/QUFA/0FB
        QP9BQT//QUE//0FBQP9CQkL/QkJC/0JCQv9CQkKfQUFBAEJCQgBCQkIAQkJCAAAAAAAoKCgAQUFBAEFB
        QQBBQUEHQkJCPEJCQsFCQkL/QkJC/0dHSv9XWXP/Wl6G/11ggf9cXnT/VFVi/0tMU/9GRkn/RkZJ/0tM
        U/9UVWL/XF50/11ggf9aXob/V1ly/0ZGSf9CQkL/QkJC/0JCQsVCQkJMQkJCCkJCQgBCQkIAKioqAEJC
        QgBBQUEAQUFBAEFBQRRBQUGoQkJC+kJCQv9BQUD/WFpy/4iQ5P+Nlfv/h5D3/4KK6/96gdn/cnnJ/2xz
        wP9sc8D/cnnJ/3qB2P+Biur/h5D2/4yV+/+Ij+L/V1lx/0FBQP9CQkL/QkJC/0JCQrJBQUEVQkJCAEJC
        QgBBQUEAQkJCAEBAQABBQUEAQUFBC0JCQo5CQkL+QkJC/0BAP/9oaoT/xMjz/9DT9P+ttPD/mKD2/5Ga
        /v+Ikv//g43//4ON//+Ikv//kZr+/5ig9v+ss/H/ztP0/8HG8/9maYT/QEA//0JCQv9CQkL+QkJCh0FB
        QQlBQUEAQkJCAEFBQQBCQkIAQkJCAEVFRQBCQkI6QkJCuUJCQv9CQkL/Pz8//3t8gf/k5u3/6uzv/9PW
        4P/Lz+H/0tby/8jN9P+2vOr/trzq/8jN9P/S1vL/y8/h/9PW4P/q7O//4+bt/3p7gf8/Pz//QkJC/0JC
        Qv9CQkK7QUFBPDs7OwBBQUEAQUFBAENDQwBDQ0MAQEBAAEJCQjJCQkLGQkJC/0JCQv8/Pz//f3+B/+fp
        7f/p6+//09ff/9TX3//q7O//6uzu/9XY3//V2N//6uzu/+rs7//U19//09ff/+nr7//n6e3/f3+B/z8/
        P/9CQkL/QkJC/0JCQsZCQkIxQkJCAEJCQgBCQkIAQ0NDAENDQwA+Pj4AQkJCMEJCQrpCQkL/QkJC/z8/
        P/99fX7/5ufr/+rs8P/U1+D/1Njh/+vt8f/r7fH/1tni/9bZ4v/r7fH/6+3x/9XY4f/U1+D/6uzw/+Xn
        6/98fX7/Pz8//0JCQv9CQkL/QkJCvEJCQjI/Pz8AQ0NDAENDQwBCQkIAQkJCAEVFRQBCQkJHQkJC1EJC
        Qv9CQkL/QEBA/2RkZf/Excj/4uTo/83Q2P++wcj/uru+/7O0tv+hoqf/oaKn/7O0tv+6u77/vsHI/8zQ
        1//h4+f/wcLF/2JiY/9AQED/QkJC/0JCQv9CQkLWQkJCSD4+PgBCQkIAQkJCAEZGRgBWVlYAQUFBAEJC
        QghCQkJcQkJC1UJCQv9CQkH/RUVF/2RkZf95env/cnN1/2NkZv9SUlL/S09S/0hTW/9HUlr/S05Q/1FR
        Uv9jZGb/cnN1/3l5e/9iYmP/RUVF/0JCQf9CQkL/QkJC1UJCQl9DQ0MJQUFBAGVlZQBHR0cAREREAEJC
        QgBFRUUARENDAEA/PgVCQUBHQUJDtEJDRPRCQkL/QD8//z8+Pf9APj3/QD8+/0JLUv9He57/S57X/0qb
        0/9GdZX/QkhN/0A/Pv9APj7/Pz49/0BAP/9CQkP/QkRF8UFCQ6tCQUBCQkJBBUNDQgBCQkIARkZGAEVF
        RQBSUlIAWVlZAEtIRQD/AAAANHGbACWj+xkskdeNQISz70ZuiP9EW2r/RFNe/0RSW/9EUlz/R3qc/0yw
        9P9NuP//Tbj//0ys7v9Hco//RFJb/0RSW/9EVWD/RV5w/0dzkf9AiLrsK5XdhyWp/xc1cpwAAP//AEVA
        PABQUFAAUlJSAAAAAAAAAAAAJqX8ACWm/wAjo/0BJab/byao/+0+sP7/TbDz/0yq6v9MqOb/TKfm/0un
        5f9MsPP/Tbf//0y3//9Mt///Tbf+/0yu8f9Lp+X/TKfm/0yo5/9Mq+z/TbH2/z2x//8mqP/tJaf/biWl
        /QElp/8AJqf/AD8/PwAAAAAAAAAAAAAAAAAlpv8AJab/ACSl/wMlpv+SJqf//zuv//9Mt///Tbj//025
        //9Ls/r/N4nI/ziJx/88qvj/IaD//yCg//86qfj/OInI/zeJyP9Ls/r/Tbn//024//9Nt///O7D//yan
        //8mp/+SJaf/Aian/wAmp/8AAAAAAAAAAAAAAAAAAAAAACWm/wAlpv8AHaL/ACWn/1Emp//TNa3/90u2
        //5Nt///Trj//0it9P8nZZ3/JmSb/yyV5f8OlPz/DpT8/yiU5v8lY5v/KGad/0it8/9NuP//Tbf//0u2
        //42rv/3Jqf/0yWm/1Egn/8AJab/ACWm/wAAAAAAAAAAAAAAAAAAAAAAIaL/ABST/wAmqP8AJKb/CCSm
        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
        AA/wAAAP8AAAD/AAAA/4AAAf/wAA//+AAf8=
</value>
  </data>
</root>